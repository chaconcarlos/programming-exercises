#
# File: CMakeLists.txt
#
# Date: Mon Apr 06, 2015
# Author: Carlos Chacon <chacon.carlosj@gmail.com>
#
# Revision $Revision: 1$

CMAKE_MINIMUM_REQUIRED (VERSION 2.6)
PROJECT (structures-sample CXX C)

# Find external dependencies
LIST (APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Import macros
#INCLUDE (TargetArch)
#INCLUDE (ProcessDebugInformation)

# Set variables
IF (DEFINED VERSION_MAJOR)
  SET (VERSION_MAJOR ${VERSION_MAJOR})
ELSE ()
  SET (VERSION_MAJOR 0)
ENDIF ()

IF (DEFINED VERSION_MINOR)
  SET (VERSION_MINOR ${VERSION_MINOR})
ELSE ()
  SET (VERSION_MINOR 5)
ENDIF ()

IF (DEFINED VERSION_BUILD)
  SET (VERSION_BUILD ${VERSION_BUILD})
ELSE ()
  SET (VERSION_BUILD 1)
ENDIF ()

SET (VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BUILD})

# Print variables to stdout
MESSAGE ( STATUS )
MESSAGE ( STATUS "Configuring ${CMAKE_PROJECT_NAME}:" )
MESSAGE ( STATUS "Version: ${VERSION}" )
MESSAGE ( STATUS "Build type: ${CMAKE_BUILD_TYPE}" )
MESSAGE ( STATUS )

# Find external packages
#FIND_PACKAGE (GTK3 3.0      REQUIRED COMPONENTS gtk gtkmm)

#INCLUDE_DIRECTORIES (SYSTEM ${GTK3_INCLUDE_DIRS})


# Enable unit test build
#IF (TESTING_ENABLED)
  #INCLUDE (CTest)
  #ENABLE_TESTING ()

  #FIND_PROGRAM (CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
  #SET (MEMORYCHECK_COMMAND_OPTIONS "--trace-children=yes --leak-check=full")
#ENDIF ()

INCLUDE (CTest)
ENABLE_TESTING ()

# Create configuration header
#CONFIGURE_FILE ("${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in" "${CMAKE_CURRENT_SOURCE_DIR}/src/config.h")

# Source code files
FILE (GLOB_RECURSE SOURCE_FILES src/*.cpp include/*.h include/*.inl)
FILE (GLOB_RECURSE TEST_SRC_FILES tests/*.cpp tests/*.h tests/*.inl)

# Add common compiler flags.
IF (CMAKE_COMPILER_IS_GNUCXX)
  ADD_DEFINITIONS("-std=c++11")
  SET (CMAKE_C_FLAGS_RELEASE          "-std=c++11 -s -O3")
  SET (CMAKE_CXX_FLAGS_RELEASE        "-std=c++11 -s -O3")
  SET (CMAKE_C_FLAGS_RELWITHDEBINFO   "-std=c++11 -g -O0")
  SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "-std=c++11 -g -O0")
  SET (CMAKE_C_FLAGS_DEBUG            "-std=c++11 -g -O0")
  SET (CMAKE_CXX_FLAGS_DEBUG          "-std=c++11 -g -O0")
ENDIF ()

#ADD_DEFINITIONS (-DHAVE_CONFIG_H)

# Build application
#ADD_EXECUTABLE (${CMAKE_PROJECT_NAME} ${SOURCE_FILES})
#PROCESS_DEBUG_INFO (${CMAKE_PROJECT_NAME} bin dbg)

#TARGET_LINK_LIBRARIES (${CMAKE_PROJECT_NAME}
#  ${CMAKE_THREAD_LIBS_INIT}
#  ${CMAKE_DL_LIBS}
#)

# Add the install targets
#INSTALL (
#  TARGETS     ${CMAKE_PROJECT_NAME}
#  COMPONENT   bin
#  DESTINATION bin
#  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
#)

# Get the target architecture platform.
#TARGET_ARCHITECTURE (ARCHITECTURE ARCHITECTURE_ALTERNATIVE_NAME)

# Packaging.
INCLUDE(CPackComponent)

IF (ARCHITECTURE_ALTERNATIVE_NAME)
  SET (CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${ARCHITECTURE})
ENDIF ()

SET (CPACK_SOURCE_IGNORE_FILES ".swp,.git")
SET (CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} bin)

#SET (CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/COPYING)
SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "Hash table exercise.")
SET (CPACK_PACKAGE_VENDOR "Carlos Chacon, Developer.")
SET (CPACK_PACKAGE_VERSION ${VERSION})
SET (CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${VERSION}-${ARCHITECTURE_ALTERNATIVE_NAME}")

# Debian.
SET (CPACK_SOURCE_GENERATOR DEB)
SET (CPACK_DEB_COMPONENT_INSTALL ON)

SET (CPACK_DEBIAN_PACKAGE_MAINTAINER "Carlos Chacon <chacon.carlosj@gmail.com>")

IF (CMAKE_VERSION VERSION_GREATER 3.2.0)
  SET (CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS       ON)
  SET (CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS        OFF)
  SET (CPACK_DEBIAN_PACKAGE_SHLIBDEPS              OFF)
  SET (CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY ">=")
  SET (CPACK_DEBIAN_FILE_NAME                      DEB-DEFAULT)
ENDIF ()

# Build tests
IF (TESTING_ENABLED AND TEST_SRC_FILES)
  SET (PROJECT_TEST_NAME test-${CMAKE_PROJECT_NAME})

  FIND_PACKAGE (GTest)
  FIND_PACKAGE (GoogleMocks)

  IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c99-extensions")
  ENDIF ()

  ADD_EXECUTABLE (${PROJECT_TEST_NAME} ${TEST_SRC_FILES} ${SOURCE_FILES})

  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} SYSTEM PRIVATE ${GTEST_INCLUDE_DIR})
  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} SYSTEM PRIVATE ${GOOGLE_MOCKS_INCLUDE_DIRS})
  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include")
  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/src")

  MESSAGE (STATUS ${CMAKE_CURRENT_SOURCE_DIR})

  TARGET_LINK_LIBRARIES (${PROJECT_TEST_NAME}
    PRIVATE ${GTEST_MAIN_LIBRARY}
    PRIVATE ${GTEST_LIBRARY}
    PRIVATE ${GOOGLE_MOCKS_LIBRARIES})

  MESSAGE (STATUS ${GTEST_MAIN_LIBRARY})
  MESSAGE (STATUS ${GTEST_LIBRARY})
  MESSAGE (STATUS ${TEST_SRC_FILES})

  GTEST_ADD_TESTS ("${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_TEST_NAME}" "" ${TEST_SRC_FILES})

  IF (COTIRE_ENABLED)
    COTIRE (${PROJECT_TEST_NAME})
  ENDIF ()
ENDIF ()

INCLUDE (CPack)
